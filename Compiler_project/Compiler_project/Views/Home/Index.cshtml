<head>
    <meta charset="utf-8">
    <title>Compiler Project</title>
    <style>
* {
    margin: 0;
    padding: 0;
    box-sizing: border-box;
    font-family: "Poppins",sans-serif;
}

body {
    display: grid;
    vertical-align: baseline;
    align-items: center;
    justify-content: center;
    min-height: 100vh;
    background: linear-gradient(#4671EA, #AC34E7)
}
.output {
    width: 100%;
    height: 500px;
    padding: 15px;
    outline: none;
    resize: none;
    font-size: 20px;
    border:2px solid;
    border-radius: 5px;
    border-color: #bfbfbf;
    max-height: 400px;
    white-space: nowrap;
    padding: 14px;
    border-color: #4671EA;
    overflow:scroll;
    overflow-y:scroll;
}

.editorToolBar {
    transform: translate(76%, -5px);
}

.comment {
    font-family: "Roboto",sans-serif;
    font-size: 15px;
    font-weight: bold;
    background: #4671EA;
    width: 97px;
    padding: 6px;
    margin-right: 5px;
    text-align: center;
    color: #fff;
    border-radius: 5px;
    box-shadow: 0 0 10px rgba(0,0,0,.1);
    -webkit-transition-duration: 0.3s;
    transition-duration: 0.3s;
    -webkit-transition-property: box-shadow, transform;
    transition-property: box-shadow, transform;
}

.wrapper {
    width: 900px;
    background: #FFF;
    border-radius: 5px;
    padding: 25px 25px 30px;
    margin: 25px;
}

    .wrapper h2 {
        color: #4671EA;
        font-size: 28px;
        text-align: center;
    }

    .wrapper span {
        color: #4671EA;
        font-size: 22px;
        vertical-align: -webkit-baseline-middle;
    }

    .wrapper textarea {
        width: 100%;
        height: 500px;
        padding: 15px;
        outline: none;
        resize: none;
        font-size: 16px;
        border-radius: 5px;
        border-color: #bfbfbf;
        max-height: 400px;
        white-space: nowrap;
    }

textarea:is(:focus, :valid) {
    border-width: 2px;
    padding: 14px;
    border-color: #4671EA;
}

.botton {
    margin-top: 20px;
    margin-left: 250px;
}

.btn {
    font-family: "Roboto",sans-serif;
    font-size: 18px;
    font-weight: bold;
    background: #4671EA;
    width: 120px;
    padding: 10px;
    margin-top: 10px;
    margin-right: 5px;
    text-align: center;
    text-decoration: none;
    text-transform: uppercase;
    color: #fff;
    border-radius: 5px;
    cursor: pointer;
    box-shadow: 0 0 10px rgba(0,0,0,.1);
    -webkit-transition-duration: 0.3s;
    transition-duration: 0.3s;
    -webkit-transition-property: box-shadow, transform;
    transition-property: box-shadow, transform;
}

.btn:hover, .btn:focus, .btn:active {
    box-shadow: 0 0 20px rgba(0,0,0,0.5);
    -webkit-transform: scale(1.1);
    transform: scale(1.1);
}

input[type="file"] {
    position: absolute;
    visibility: hidden;
}
    </style>
    <script src="https://ajax.googleapis.com/ajax/libs/jquery/1.7.1/jquery.min.js"></script>
    <script>
        $('document').ready(function () {
            $('#line_numbers').linenumbers({ col_width: '75px' });
        })</script>
    <meta name=" viewport" content="width=device-width, initial-scale=1.0" />
</head>
<body>
    <form method="post">
        <div class="wrapper">
            <h2>Code</h2>
            <div class="editorToolBar">
                <button class="comment" onclick="commentText()" name="btn" value="comment">comment</button>
                <button class="comment" onclick="uncommentText()" name="btn" value="uncomment">uncomment</button>
            </div>
            <textarea id="line_numbers" rows="4" cols="50" name="input_code" placeholder="Type your Code here ..." required>@ViewBag.code</textarea>
            <div class="botton">
                <input type="submit" class="btn" value="scan" name="btn">
                <input type="submit" class="btn" value="parse" name="btn">
                <label class="btn" for="upload">Browse</label>
                <input id="upload" type="file" name="filename">
                <span> filename </span>
                <p id="outputBX"></p>

            </div>
        </div>
    </form>
    <br>
    <div class="wrapper">
        <h2>Output</h2>
        <div class='output'>
            @if (ViewBag.vb != null)
            {
                foreach (string T in ViewBag.vb)
                {
                    <text><pre style='overflow:unset;'>@T</pre></text>
                }
            }
        </div>
        <br>
    </div>
</body>
<!-- linenumber script-->
<script>
    (function ($) {
        $.fn.linenumbers = function (in_opts) {
            // Settings and Defaults
            var opt = $.extend({
                col_width: '65px',
                start: 1,
                digits: 3.
            }, in_opts);
            // Remove existing div and the textarea from previous run
            $("[data-name='linenumbers']").remove();
            // Function run
            return this.each(function () {
                // Get some numbers sorted out for the CSS changes
                var textarea_width = $(this).prop("offsetWidth");
                var textarea_height = $(this).prop("offsetHeight");
                var new_textarea_width = parseInt(textarea_width) - parseInt(opt.col_width);
                // Create the new textarea and style it
                $(this).before('<textarea data-name="linenumbers" style="width:' + new_textarea_width + 'px;height:' + textarea_height + 'px;float:left;margin-right:' + '-' + new_textarea_width + 'px;white-space:pre;overflow:hidden;" disabled="disabled"></textarea>');
                // Edit the existing textarea's styles
                $(this).css({ 'width': new_textarea_width + 'px', 'height': textarea_height + 'px', 'float': 'right' });
                // Add a clearing div.
                $(this).after('<div style="clear:both;"></div>');
                // Define a simple variable for the line-numbers box
                var lnbox = $(this).parent().find('textarea[disabled="disabled"]');
                // Bind some actions to all sorts of events that may change it's contents
                $(this).bind('blur focus change keyup keydown', function () {
                    // Break apart and regex the lines, everything to spaces sans linebreaks
                    var lines = "\n" + $(this).val();
                    lines = lines.match(/[^\n]*\n[^\n]*/gi);
                    // declare output var
                    var line_number_output = '';
                    // declare spacers and max_spacers vars, and set defaults
                    var max_spacers = ''; var spacers = '';

                    for (i = 0; i < opt.digits; i++) {
                        max_spacers += ' ';
                    }
                    // Loop through and process each line
                    $.each(lines, function (k, v) {
                        // Add a line if not blank
                        if (k != 0) {
                            line_number_output += "\n";
                        }
                        // Determine the appropriate number of leading spaces
                        lencheck = k + opt.start + '!';
                        spacers = max_spacers.substr(lencheck.length - 1);
                        // Add the line with out line number, to the output variable
                        line_number_output += spacers + (k + opt.start) + ':';
                    });
                    // Give the text area out modified content.
                    $(lnbox).val(line_number_output);
                    // Change scroll position as they type, makes sure they stay in sync
                    $(lnbox).scrollTop($(this).scrollTop());
                });
                // Lock scrolling together, for mouse-wheel scrolling
                $(this).scroll(function () {
                    $(lnbox).scrollTop($(this).scrollTop());
                });
                // Fire it off once to get things started
                $(this).trigger('keyup');
            });
        };
    })(jQuery);
    $('textarea').linenumbers();
</script>
<!-- browse file script-->
<script>
    let upload = document.getElementById('upload');
    let outputBX = document.getElementById('outputBX');
    upload.addEventListener('change', () => {
        let fr = new FileReader();
        fr.readAsText(upload.files[0]);
        fr.onload = function () {
            outputBX.innerHTML = fr.result;
        };
    });
</script>
<!-- comment script-->
<script>
    function commentText() {
        if (document.getSelection) {
            let code = document.getElementById('line_numbers').value;
            let comment = "<*" + document.getSelection().toString() + "*>";
            code = code.replace(document.getSelection().toString(), comment);
            document.getElementById('line_numbers').value = code;
        }
    }
</script>
<!-- uncomment script-->
<script>
    function uncommentText() {
        if (document.getSelection) {
            let code = document.getElementById('line_numbers').value;
            let comment = document.getSelection().toString();
            //let re1 =/<*/
            //let uncomment = comment.replace(/('<*') ([^'<*']) ([^'*>']+) ('*>')/g, $2$3);
            let uncomment = comment.split("<*").join('');
            uncomment = uncomment.split("*>").join('');
            code = code.replace(comment, uncomment);
            document.getElementById('line_numbers').value = code;
        }
    }
</script>